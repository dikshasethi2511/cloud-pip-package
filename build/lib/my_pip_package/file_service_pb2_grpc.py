# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import file_service_pb2 as file__service__pb2


class FileServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFile = channel.unary_unary(
                '/FileService/GetFile',
                request_serializer=file__service__pb2.GetFileRequest.SerializeToString,
                response_deserializer=file__service__pb2.GetFileResponse.FromString,
                )
        self.SetFile = channel.unary_unary(
                '/FileService/SetFile',
                request_serializer=file__service__pb2.SetFileRequest.SerializeToString,
                response_deserializer=file__service__pb2.SetFileResponse.FromString,
                )
        self.DeleteFile = channel.unary_unary(
                '/FileService/DeleteFile',
                request_serializer=file__service__pb2.DeleteRequest.SerializeToString,
                response_deserializer=file__service__pb2.DeleteResponse.FromString,
                )


class FileServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFile,
                    request_deserializer=file__service__pb2.GetFileRequest.FromString,
                    response_serializer=file__service__pb2.GetFileResponse.SerializeToString,
            ),
            'SetFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFile,
                    request_deserializer=file__service__pb2.SetFileRequest.FromString,
                    response_serializer=file__service__pb2.SetFileResponse.SerializeToString,
            ),
            'DeleteFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFile,
                    request_deserializer=file__service__pb2.DeleteRequest.FromString,
                    response_serializer=file__service__pb2.DeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FileService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileService/GetFile',
            file__service__pb2.GetFileRequest.SerializeToString,
            file__service__pb2.GetFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileService/SetFile',
            file__service__pb2.SetFileRequest.SerializeToString,
            file__service__pb2.SetFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileService/DeleteFile',
            file__service__pb2.DeleteRequest.SerializeToString,
            file__service__pb2.DeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
